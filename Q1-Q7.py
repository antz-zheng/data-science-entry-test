# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tlGCdX4cgzulv-SucrDb0RGvgt9ck_Ok
"""

#Q1
def swap(x, y):

    if not (isinstance(x, (int, float)) and isinstance(y, (int, float))):
        return -1

    x, y = y, x

    # Print swapped values
    print("Swapped values: x =", x, ", y =", y)

swap("Apple", 10)
swap(9, 17)

#Q2
def find_and_replace(lst, find_val, replace_val):

    if not isinstance(lst, list):
        raise TypeError("lst must be a list")

    return [replace_val if item == find_val else item for item in lst]

# Task 2
print(find_and_replace([1, 2, 3, 4, 2, 2], 2, 5))
print(find_and_replace(["apple", "banana", "apple"], "apple", "orange"))

#Q3
def update_dictionary(dct, key, value):

    if not isinstance(dct, dict):
        raise TypeError("dct must be a dictionary")

    if key in dct:
        print(f"Original value for '{key}': {dct[key]}")

    dct[key] = value
    return dct

# Task 2
print(update_dictionary({}, "name", "Alice"))
print(update_dictionary({"age": 25}, "age", 26))

#Q4
def string_reverse(s):

    if not isinstance(s, str):
        raise TypeError("s must be a string")

    return s[::-1]

print(string_reverse("Hello World"))
print(string_reverse("Python"))

#Q5
def check_divisibility(num, divisor):

    if not (isinstance(num, (int, float)) and isinstance(divisor, (int, float))):
        raise TypeError("Both num and divisor must be numeric")

    if divisor == 0:
        raise ValueError("divisor cannot be zero")

    return num % divisor == 0

print(check_divisibility(10, 2))
print(check_divisibility(7, 3))

#Q6
def find_first_negative(lst):

    if not isinstance(lst, list):
        raise TypeError("lst must be a list")

    index = 0
    while index < len(lst):
        if lst[index] < 0:
            return lst[index]
        index += 1

    return "No negatives"

print(find_first_negative([3, 5, -1, 7, -2, 8]))
print(find_first_negative([2, 10, 7, 0]))

#Q7
class Car:

    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def describe_car(self):
        print(f"{self.year} {self.make} {self.model}")

my_car = Car("Toyota", "Corolla", 2020)
my_car.describe_car()